{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ChallengesContext = createContext(undefined);\nexport var useChallenges = function useChallenges() {\n  var context = useContext(ChallengesContext);\n  if (!context) {\n    throw new Error('useChallenges must be used within a ChallengesProvider');\n  }\n  return context;\n};\nexport var ChallengesProvider = function ChallengesProvider(_ref) {\n  var children = _ref.children;\n  var sampleChallenges = [{\n    id: '1',\n    name: 'Emergency Fund',\n    goalAmount: 50000,\n    frequency: 'Monthly',\n    dateToFinish: new Date(2025, 11, 31).toISOString(),\n    estimatedAmount: 10000,\n    currentAmount: 15000,\n    icon: 'wallet',\n    color: '#4CAF50',\n    savingEntries: [{\n      id: '1-1',\n      amount: 5000,\n      note: 'Salary bonus',\n      date: new Date(2025, 6, 1).toISOString()\n    }, {\n      id: '1-2',\n      amount: 10000,\n      note: 'Monthly savings',\n      date: new Date(2025, 6, 15).toISOString()\n    }]\n  }, {\n    id: '2',\n    name: 'Dream Vacation',\n    goalAmount: 80000,\n    frequency: 'Weekly',\n    dateToFinish: new Date(2025, 10, 15).toISOString(),\n    estimatedAmount: 2000,\n    currentAmount: 8000,\n    icon: 'airplane',\n    color: '#2196F3',\n    savingEntries: [{\n      id: '2-1',\n      amount: 3000,\n      note: 'Side gig earnings',\n      date: new Date(2025, 6, 10).toISOString()\n    }, {\n      id: '2-2',\n      amount: 5000,\n      note: 'Tax refund',\n      date: new Date(2025, 6, 20).toISOString()\n    }]\n  }, {\n    id: '3',\n    name: 'New Laptop',\n    goalAmount: 75000,\n    frequency: 'Monthly',\n    dateToFinish: new Date(2025, 8, 30).toISOString(),\n    estimatedAmount: 25000,\n    currentAmount: 30000,\n    icon: 'phone-portrait',\n    color: '#FF9800',\n    savingEntries: [{\n      id: '3-1',\n      amount: 15000,\n      note: 'Freelance project',\n      date: new Date(2025, 5, 25).toISOString()\n    }, {\n      id: '3-2',\n      amount: 15000,\n      note: 'Monthly allocation',\n      date: new Date(2025, 6, 5).toISOString()\n    }]\n  }];\n  var _useState = useState(sampleChallenges),\n    _useState2 = _slicedToArray(_useState, 2),\n    challenges = _useState2[0],\n    setChallenges = _useState2[1];\n  var addChallenge = function addChallenge(challenge) {\n    setChallenges(function (prev) {\n      var exists = prev.some(function (c) {\n        return c.id === challenge.id;\n      });\n      if (exists) {\n        return prev;\n      }\n      return [].concat(_toConsumableArray(prev), [challenge]);\n    });\n  };\n  var updateChallenge = function updateChallenge(updatedChallenge) {\n    setChallenges(function (prev) {\n      return prev.map(function (challenge) {\n        return challenge.id === updatedChallenge.id ? updatedChallenge : challenge;\n      });\n    });\n  };\n  var deleteChallenge = function deleteChallenge(challengeId) {\n    setChallenges(function (prev) {\n      return prev.filter(function (challenge) {\n        return challenge.id !== challengeId;\n      });\n    });\n  };\n  return _jsx(ChallengesContext.Provider, {\n    value: {\n      challenges: challenges,\n      addChallenge: addChallenge,\n      updateChallenge: updateChallenge,\n      deleteChallenge: deleteChallenge\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","ChallengesContext","undefined","useChallenges","context","Error","ChallengesProvider","_ref","children","sampleChallenges","id","name","goalAmount","frequency","dateToFinish","Date","toISOString","estimatedAmount","currentAmount","icon","color","savingEntries","amount","note","date","_useState","_useState2","_slicedToArray","challenges","setChallenges","addChallenge","challenge","prev","exists","some","c","concat","_toConsumableArray","updateChallenge","updatedChallenge","map","deleteChallenge","challengeId","filter","Provider","value"],"sources":["C:/Users/DeVelizH_003/Documents/budget-app/src/context/ChallengesContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\r\nimport { SavingsChallenge } from '../types/navigation';\r\n\r\ninterface ChallengesContextType {\r\n  challenges: SavingsChallenge[];\r\n  addChallenge: (challenge: SavingsChallenge) => void;\r\n  updateChallenge: (updatedChallenge: SavingsChallenge) => void;\r\n  deleteChallenge: (challengeId: string) => void;\r\n}\r\n\r\nconst ChallengesContext = createContext<ChallengesContextType | undefined>(undefined);\r\n\r\nexport const useChallenges = () => {\r\n  const context = useContext(ChallengesContext);\r\n  if (!context) {\r\n    throw new Error('useChallenges must be used within a ChallengesProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ChallengesProvider: React.FC<ChallengesProviderProps> = ({ children }) => {\r\n  // Sample data for savings challenges\r\n  const sampleChallenges: SavingsChallenge[] = [\r\n    {\r\n      id: '1',\r\n      name: 'Emergency Fund',\r\n      goalAmount: 50000,\r\n      frequency: 'Monthly',\r\n      dateToFinish: new Date(2025, 11, 31).toISOString(), // December 31, 2025\r\n      estimatedAmount: 10000,\r\n      currentAmount: 15000,\r\n      icon: 'wallet',\r\n      color: '#4CAF50',\r\n      savingEntries: [\r\n        {\r\n          id: '1-1',\r\n          amount: 5000,\r\n          note: 'Salary bonus',\r\n          date: new Date(2025, 6, 1).toISOString(), // July 1, 2025\r\n        },\r\n        {\r\n          id: '1-2',\r\n          amount: 10000,\r\n          note: 'Monthly savings',\r\n          date: new Date(2025, 6, 15).toISOString(), // July 15, 2025\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Dream Vacation',\r\n      goalAmount: 80000,\r\n      frequency: 'Weekly',\r\n      dateToFinish: new Date(2025, 10, 15).toISOString(), // November 15, 2025\r\n      estimatedAmount: 2000,\r\n      currentAmount: 8000,\r\n      icon: 'airplane',\r\n      color: '#2196F3',\r\n      savingEntries: [\r\n        {\r\n          id: '2-1',\r\n          amount: 3000,\r\n          note: 'Side gig earnings',\r\n          date: new Date(2025, 6, 10).toISOString(), // July 10, 2025\r\n        },\r\n        {\r\n          id: '2-2',\r\n          amount: 5000,\r\n          note: 'Tax refund',\r\n          date: new Date(2025, 6, 20).toISOString(), // July 20, 2025\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'New Laptop',\r\n      goalAmount: 75000,\r\n      frequency: 'Monthly',\r\n      dateToFinish: new Date(2025, 8, 30).toISOString(), // September 30, 2025\r\n      estimatedAmount: 25000,\r\n      currentAmount: 30000,\r\n      icon: 'phone-portrait',\r\n      color: '#FF9800',\r\n      savingEntries: [\r\n        {\r\n          id: '3-1',\r\n          amount: 15000,\r\n          note: 'Freelance project',\r\n          date: new Date(2025, 5, 25).toISOString(), // June 25, 2025\r\n        },\r\n        {\r\n          id: '3-2',\r\n          amount: 15000,\r\n          note: 'Monthly allocation',\r\n          date: new Date(2025, 6, 5).toISOString(), // July 5, 2025\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const [challenges, setChallenges] = useState<SavingsChallenge[]>(sampleChallenges);\r\n\r\n  const addChallenge = (challenge: SavingsChallenge) => {\r\n    setChallenges(prev => {\r\n      // Check if challenge already exists to prevent duplicates\r\n      const exists = prev.some(c => c.id === challenge.id);\r\n      if (exists) {\r\n        return prev;\r\n      }\r\n      return [...prev, challenge];\r\n    });\r\n  };\r\n\r\n  const updateChallenge = (updatedChallenge: SavingsChallenge) => {\r\n    setChallenges(prev => \r\n      prev.map(challenge => \r\n        challenge.id === updatedChallenge.id ? updatedChallenge : challenge\r\n      )\r\n    );\r\n  };\r\n\r\n  const deleteChallenge = (challengeId: string) => {\r\n    setChallenges(prev => prev.filter(challenge => challenge.id !== challengeId));\r\n  };\r\n\r\n  return (\r\n    <ChallengesContext.Provider value={{ \r\n      challenges, \r\n      addChallenge, \r\n      updateChallenge, \r\n      deleteChallenge \r\n    }}>\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}